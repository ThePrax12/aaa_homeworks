import unittest
from pizza import Pizza, MargheritaPizza, PepperoniPizza, ShrimpPizza, HawaiianPizza
from click.testing import CliRunner
from order import cli


class TestPizza(unittest.TestCase):

    def test_pizza_initialization(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∏—Ü—Ü—ã"""
        pizza = MargheritaPizza()
        self.assertEqual(pizza._name, "–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞üßÄ")
        self.assertEqual(
            pizza._ingredients, {"–¢–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å": 0, "–ú–æ—Ü–∞—Ä–µ–ª–ª–∞": 0, "–¢–æ–º–∞—Ç—ã": 0}
        )
        self.assertEqual(pizza._size, None)
        self.assertEqual(pizza._stage, "Uncooked")

    def test_cook(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ cook"""
        pizza = PepperoniPizza()
        pizza.cook("L")
        self.assertEqual(pizza._size, "L")
        self.assertEqual(pizza._stage, "Cooked")
        self.assertEqual(
            pizza._ingredients, {"–¢–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å": 1, "–ú–æ—Ü–∞—Ä–µ–ª–ª–∞": 1, "–ü–µ–ø–µ—Ä–æ–Ω–∏": 1}
        )

    def test_invalid_size_in_cook(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–∏—Ü—Ü—ã"""
        pizza = HawaiianPizza()
        pizza.cook("M")
        self.assertEqual(pizza._size, None)
        self.assertEqual(pizza._stage, "Uncooked")

    def test_dict(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ dict"""
        pizza = MargheritaPizza()
        self.assertEqual(pizza.dict(), ["–¢–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å", "–ú–æ—Ü–∞—Ä–µ–ª–ª–∞", "–¢–æ–º–∞—Ç—ã"])

    def test_eq(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è __eq__"""
        pizza1 = MargheritaPizza()
        pizza1.cook("XL")
        pizza2 = MargheritaPizza()
        pizza2.cook("XL")
        pizza3 = PepperoniPizza()
        pizza3.cook("L")
        self.assertTrue(pizza1 == pizza2)
        self.assertFalse(pizza1 == pizza3)

    def test_cli_order(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã CLI 'order'"""
        runner = CliRunner()
        result = runner.invoke(cli, ["order", "–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞", "L", "--delivery"])
        self.assertEqual(result.exit_code, 0)
        self.assertIn("–î–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–∏—Ü—Ü—É", result.output)

        result = runner.invoke(cli, ["order", "–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞", "L"])
        self.assertEqual(result.exit_code, 0)
        self.assertIn("–ñ–¥—ë–º —Å–∞–º–æ–≤—ã–≤–æ–∑ –ø–∏—Ü—Ü—ã", result.output)

    def test_cli_menu(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã CLI 'menu'"""
        runner = CliRunner()
        result = runner.invoke(cli, ["menu"])
        self.assertEqual(result.exit_code, 0)
        self.assertIn("–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞", result.output)
        self.assertIn("–ü–µ–ø–µ—Ä–æ–Ω–∏", result.output)


if __name__ == "__main__":
    unittest.main()
